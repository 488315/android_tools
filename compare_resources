#!/usr/bin/env python
import os
import shutil
import subprocess
import tempfile
import argparse
import datetime
import logging
from pathlib import Path
from lxml import etree as ET
import xmltodict

# Configure logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")


def check_dependencies():
    """
    Ensure required dependencies are installed.
    """
    if not shutil.which("apktool"):
        logging.error("apktool is not installed or not in PATH. Please install it.")
        exit(1)


def validate_directories(apk_dir, source_dir):
    """
    Validate input directories.
    """
    if not os.path.exists(apk_dir):
        logging.error(f"APK directory '{apk_dir}' does not exist.")
        exit(1)
    if not os.path.exists(source_dir):
        logging.error(f"Source directory '{source_dir}' does not exist.")
        exit(1)


def extract_apk_resources(apk_path, output_dir):
    """
    Extract resources from the APK using apktool.
    """
    if os.path.exists(output_dir):
        shutil.rmtree(output_dir)

    try:
        os.environ["JAVA_OPTS"] = "-Xmx2g"
        subprocess.run(["apktool", "d", apk_path, "-o", output_dir], check=True)
        logging.info(f"Extracted APK resources to {output_dir}")
    except subprocess.CalledProcessError as e:
        logging.error(f"Failed to extract APK resources: {e}")
        exit(1)
    finally:
        os.environ.pop("JAVA_OPTS", None)


def parse_xml(file_path):
    """
    Parse an XML file and return its content as a dictionary.
    """
    encodings = ["utf-8", "ISO-8859-1", "latin1"]
    for enc in encodings:
        try:
            with open(file_path, "r", encoding=enc) as file:
                content = file.read()
            return xmltodict.parse(content, process_namespaces=True)
        except Exception as e:
            logging.warning(f"Error parsing {file_path} with encoding {enc}: {e}")
    return {}


def collect_resources_from_dict(resource_dict):
    """
    Collect string, array, boolean, integer, and dimen resources from the parsed resource dictionary.
    """
    resources = {}
    if "resources" in resource_dict:
        res = resource_dict["resources"]
        for res_type in ["string", "string-array", "bool", "integer", "dimen"]:
            if res_type in res:
                items = res[res_type]
                if isinstance(items, list):
                    for item in items:
                        if "@name" in item:
                            resources[f"{res_type}:{item['@name']}"] = item.get(
                                "#text", ""
                            )
                elif isinstance(items, dict) and "@name" in items:
                    resources[f"{res_type}:{items['@name']}"] = items.get("#text", "")
    return resources


def load_resources(resource_dir):
    """
    Load resources from a directory and return as a dictionary.
    """
    resources = {}
    xml_files = list(Path(resource_dir).rglob("res/values/*.xml"))

    for xml_file in xml_files:
        resource_dict = parse_xml(xml_file)
        resources.update(collect_resources_from_dict(resource_dict))

    return resources


def compare_resources(aosp_resources, apk_resources):
    """
    Compare resources from AOSP and APK, and return differences.
    """
    differences = {}

    all_keys = set(aosp_resources.keys()).union(apk_resources.keys())
    for key in all_keys:
        aosp_value = aosp_resources.get(key)
        apk_value = apk_resources.get(key)

        if aosp_value != apk_value:
            differences[key] = {"aosp": aosp_value, "apk": apk_value}

    return differences


def generate_config_xml(differences, output_file):
    """
    Generate a config.xml file with the differences.
    """
    root = ET.Element("resources")

    for key, diff in differences.items():
        res_type, name = key.split(":")
        item = ET.SubElement(root, res_type, name=name)
        item.text = str(diff["apk"])

    tree = ET.ElementTree(root)
    tree.write(output_file, encoding="utf-8", xml_declaration=True)
    logging.info(f"Generated {output_file}")


def main(apk_dir, source_dir, output_file="config.xml"):
    check_dependencies()
    validate_directories(apk_dir, source_dir)

    temp_dir = tempfile.mkdtemp()

    try:
        logging.info("Extracting APK resources...")
        extract_apk_resources(apk_dir, temp_dir)

        logging.info("Loading AOSP resources...")
        aosp_resources = load_resources(source_dir)

        logging.info("Loading APK resources...")
        apk_resources = load_resources(temp_dir)

        logging.info("Comparing resources...")
        differences = compare_resources(aosp_resources, apk_resources)

        logging.info("Generating output file...")
        generate_config_xml(differences, output_file)

    finally:
        shutil.rmtree(temp_dir)
        logging.info("Cleaned up temporary files.")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Compare AOSP resources with APK resources.")
    parser.add_argument("--apk_dir", required=True, help="Path to the APK directory.")
    parser.add_argument("--source_dir", required=True, help="Path to the AOSP source directory.")
    parser.add_argument("--output", default="config.xml", help="Output file for differences (default: config.xml).")

    args = parser.parse_args()
    main(args.apk_dir, args.source_dir, args.output)
